function swap(A, i, j) {
    let temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

function reverse_array(A) {
    const len = array_length(A);
    const half_len = math_floor(len / 2);
    let i = 0;
    while (i < half_len) {
        const j = len - 1 - i;
        swap(A, i, j);
        i = i + 1;
    }
}

const arr = [1, 2, 3, 4, 5];
reverse_array(arr);
arr;

function d_merge(xs, ys) {

    // *** Your answer here. ***
    if(is_null(xs)){
        return ys;
    }
    if(is_null(ys)){
        return xs;
    }
    
    if(head(xs)<head(ys)){
        set_tail(xs, d_merge(tail(xs), ys));
        return xs;
    }
    else{
        set_tail(ys, d_merge(xs, tail(ys)));
        return ys;
    }
}

// TEST:
const my_list1 = list(2, 4, 5, 9);
const my_list2 = list(3, 5, 8);
d_merge(my_list1, my_list2);

// Question was left blank by the student.
function d_split_list(xs) {

    // *** Your answer here. ***
    // const left_list = null;
    let right_list = null;
    const ln = math_ceil(length(xs) / 2);
    let i = 0;
    let curr = xs;

    while(i < ln - 1){
        curr = tail(curr);
        i = i + 1;
    }

    right_list = tail(curr);
    set_tail(curr, null);
    return pair(xs, right_list);
    
}

function d_merge_sort(xs){
    if(is_null(xs) || is_null(tail(xs))){
        return xs;
    }
    else{
    const split = d_split_list(xs);
    
    return d_merge(d_merge_sort(head(split)), d_merge_sort(tail(split)));
    }
}



d_merge_sort(list(7,2,4,6,9,1,5,8,3,6));
