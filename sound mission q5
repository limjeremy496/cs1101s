// Task 5
import {make_sound, get_wave, get_duration, play, silence_sound} from "sound";
// Task 5

// Copy your own sine_sound function from the previous question here.
function sine_sound(freq, duration) {
    /* your answer here */
     return make_sound(t => math_sin(2 * math_PI * freq * t), duration);
}
// Copy your own two_consecutively function from the previous question here.
function two_consecutively(s1, s2) {
    /* your answer here */
    const w1 = get_wave(s1);
    const w2 = get_wave(s2);
    const d1 = get_duration(s1);
    const d2 = get_duration(s2);
    const w_merged = t => t <= d1 ? w1(t) : w2(t);
    return make_sound(w_merged, d1 + d2);
}
// Copy your own consecutively function from the previous question here.
function consecutively(list_of_sounds) {
    /* your answer here */
    
    return accumulate(two_consecutively, silence_sound(0), list_of_sounds);
}

const dot_duration = 0.125;
const dash_duration = 3 * dot_duration;

// Create dot, dash and pause sounds first.
const dot_sound = sine_sound(800, dot_duration) ;
const dash_sound = sine_sound(800, dash_duration);
const dot_pause = silence_sound(dot_duration);
const dash_pause = silence_sound(dash_duration);

// Create sounds for each letter.
const S_sound = consecutively(list(dot_sound, dot_pause, dot_sound, dot_pause,
                                    dot_sound));
const O_sound = consecutively(list(dash_sound, dot_pause, dash_sound, dot_pause,
                                    dash_sound));

// Build the signal out of letter sounds and pauses.
// const distress_signal = consecutively(list(S_sound, dash_pause, O_sound));

// // Play distress signal.
// play(distress_signal);