//q1

/*function flatten_list(xs){
    return accumulate(append,
                     null, 
                     xs);
}




const LoL = list(list(1, 2), list(3, 4, 5, 6), null, list(7, 8, 9));
flatten_list(LoL);*/
// Returns list(1, 2, 3, 4, 5, 6, 7, 8, 9)

//q2

//is_pair || is_null 
//can replace is_list

/*function tree_sum(tree){
    return is_null(tree)
        ? 0
        : (is_list(head(tree))
            ? tree_sum(head(tree))
            : head(tree)) //1
            +
            tree_sum(tail(tree)) //2
        ;
}


const my_tree = list(1, list(2, list(3, 4), 5), list(6, 7));
tree_sum(my_tree);*/
// Returns 28


//q3

function accumulate_tree(f, op ,initial, tree){
    return accumulate(
            (x, acc) => 
                !is_list(x)
                    ? op(f(x), acc)
                    : op(accumulate_tree(f, op, initial, x), acc),
            initial,
            tree)
            ;
}

function tree_sum(tree) {
return accumulate_tree(x => x, (x, y) => x + y, 0 , tree);
}

function count_data_items(tree) {
return accumulate_tree(x => 1, (x, y) => x + y, 0 , tree);
}

//The following function flattens a given tree into a list:
function flatten(tree) {
return accumulate_tree(x => list(x), append, null , tree);
}


